module ElasticGraph
  module SchemaDefinition
    module Indexing
      class JSONSchemaWithMetadataSupertype
        attr_reader json_schema: ::Hash[::String, untyped]
        attr_reader missing_fields: ::Set[::String]
        attr_reader missing_types: ::Set[::String]
        attr_reader definition_conflicts: ::Set[SchemaElements::DeprecatedElement]
        attr_reader missing_necessary_fields: ::Array[JSONSchemaWithMetadata::MissingNecessaryField]

        def initialize: (
          json_schema: ::Hash[::String, untyped],
          missing_fields: ::Set[::String],
          missing_types: ::Set[::String],
          definition_conflicts: ::Set[SchemaElements::DeprecatedElement],
          missing_necessary_fields: ::Array[JSONSchemaWithMetadata::MissingNecessaryField]
        ) -> void

        def with: (
          ?json_schema: ::Hash[::String, untyped],
          ?missing_fields: ::Set[::String],
          ?missing_types: ::Set[::String],
          ?definition_conflicts: ::Set[SchemaElements::DeprecatedElement],
          ?missing_necessary_fields: ::Array[JSONSchemaWithMetadata::MissingNecessaryField]
        ) -> instance
      end

      class JSONSchemaWithMetadata < JSONSchemaWithMetadataSupertype
        def json_schema_version: () -> ::Integer

        class Merger
          @field_metadata_by_type_and_field_name: ::Hash[::String, ::Hash[::String, JSONSchemaFieldMetadata]]
          @renamed_types_by_old_name: ::Hash[::String, SchemaElements::DeprecatedElement]
          @deleted_types_by_old_name: ::Hash[::String, SchemaElements::DeprecatedElement]
          @renamed_fields_by_type_name_and_old_field_name: ::Hash[::String, ::Hash[::String, SchemaElements::DeprecatedElement]]
          @deleted_fields_by_type_name_and_old_field_name: ::Hash[::String, ::Hash[::String, SchemaElements::DeprecatedElement]]
          @state: State
          @derived_indexing_type_names: ::Set[::String]

          attr_reader unused_deprecated_elements: ::Set[SchemaElements::DeprecatedElement]

          def initialize: (Results) -> void
          def merge_metadata_into: (::Hash[::String, untyped]) -> JSONSchemaWithMetadata

          private

          def determine_current_type_name: (
            ::String,
            missing_types: ::Set[::String],
            definition_conflicts: ::Set[SchemaElements::DeprecatedElement]
          ) -> ::String?

          def field_metadata_for: (
            ::String,
            ::String,
            missing_fields: ::Set[::String],
            definition_conflicts: ::Set[SchemaElements::DeprecatedElement]
          ) -> JSONSchemaFieldMetadata?

          def identify_missing_necessary_fields: (
            ::Hash[::String, untyped],
            ::Hash[::String, ::String]
          ) -> ::Array[MissingNecessaryField]

          def identify_missing_necessary_fields_for_index_def: (
            indexableType,
            Index,
            JSONSchemaResolver,
            ::Integer
          ) -> ::Array[MissingNecessaryField]

          class JSONSchemaResolver
            @state: State
            @old_type_name_by_current_name: ::Hash[::String, ::String]
            @meta_by_old_type_and_name_in_index: ::Hash[::String, ::Hash[::String, ::Hash[::String, untyped]]]

            def initialize: (State, ::Hash[::String, untyped], ::Hash[::String, ::String]) -> void
            def necessary_path_missing?: (SchemaElements::FieldPath) -> bool

            private

            def necessary_path_part_missing?: (::String, ::String) { (::Hash[::String, untyped]) -> void } -> bool
          end
        end

        class MissingNecessaryField
          attr_reader field_type: ::String
          attr_reader fully_qualified_path: ::String

          def initialize: (
            field_type: ::String,
            fully_qualified_path: ::String
          ) -> void
        end
      end
    end
  end
end
