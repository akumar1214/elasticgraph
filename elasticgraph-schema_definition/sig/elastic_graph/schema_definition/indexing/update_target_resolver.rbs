module ElasticGraph
  module SchemaDefinition
    module Indexing
      class UpdateTargetResolver
        def initialize: (
          object_type: indexableType,
          resolved_relationship: ResolvedRelationship,
          sourced_fields: ::Array[SchemaElements::Field],
          field_path_resolver: SchemaElements::FieldPath::Resolver,
        ) -> void

        def resolve: () -> [SchemaArtifacts::RuntimeMetadata::UpdateTarget?, ::Array[::String]]

        private

        attr_reader object_type: indexableType
        attr_reader resolved_relationship: ResolvedRelationship
        attr_reader sourced_fields: ::Array[SchemaElements::Field]
        attr_reader field_path_resolver: SchemaElements::FieldPath::Resolver

        def validate_relationship: () -> ::Array[::String]
        def relationship_error_prefix: () -> ::String

        def resolve_data_params: () -> [
          ::Hash[::String, SchemaArtifacts::RuntimeMetadata::DynamicParam],
          ::Array[::String]
        ]

        def resolve_field_source: (_FieldSourceAdapter) -> [::String?, ::String?]

        interface _FieldSourceAdapter
          def get_field_source: (SchemaElements::Relationship, Index) {
            (::String) -> bot
          } -> ::String?

          def cannot_update_reason: (indexableType, ::String) -> ::String
        end

        module RoutingSourceAdapter
          extend _FieldSourceAdapter
        end

        module RolloverTimestampSourceAdapter
          extend _FieldSourceAdapter
        end
      end
    end
  end
end
